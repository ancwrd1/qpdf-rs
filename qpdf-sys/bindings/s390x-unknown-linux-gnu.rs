/* automatically generated by rust-bindgen 0.69.1 */

pub const QPDF_MAJOR_VERSION: u32 = 11;
pub const QPDF_MINOR_VERSION: u32 = 6;
pub const QPDF_PATCH_VERSION: u32 = 4;
pub const QPDF_VERSION: &[u8; 7] = b"11.6.4\0";
pub const _STRING_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const __USE_ANSI: u32 = 1;
pub const _BSD_SOURCE: u32 = 1;
pub const _SVID_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_BSD: u32 = 1;
pub const __USE_SVID: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201103;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 17;
pub const __GLIBC_HAVE_LONG_LONG: u32 = 1;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_MATH_OPTIONAL: u32 = 1;
pub const _XLOCALE_H: u32 = 1;
pub const QPDF_SUCCESS: u32 = 0;
pub const QPDF_WARNINGS: u32 = 1;
pub const QPDF_ERRORS: u32 = 2;
pub const QPDF_TRUE: u32 = 1;
pub const QPDF_FALSE: u32 = 0;
pub const qpdf_exit_code_e_qpdf_exit_success: qpdf_exit_code_e = 0;
pub const qpdf_exit_code_e_qpdf_exit_error: qpdf_exit_code_e = 2;
pub const qpdf_exit_code_e_qpdf_exit_warning: qpdf_exit_code_e = 3;
pub const qpdf_exit_code_e_qpdf_exit_is_not_encrypted: qpdf_exit_code_e = 2;
pub const qpdf_exit_code_e_qpdf_exit_correct_password: qpdf_exit_code_e = 3;
pub type qpdf_exit_code_e = ::std::os::raw::c_uint;
pub const qpdf_error_code_e_qpdf_e_success: qpdf_error_code_e = 0;
pub const qpdf_error_code_e_qpdf_e_internal: qpdf_error_code_e = 1;
pub const qpdf_error_code_e_qpdf_e_system: qpdf_error_code_e = 2;
pub const qpdf_error_code_e_qpdf_e_unsupported: qpdf_error_code_e = 3;
pub const qpdf_error_code_e_qpdf_e_password: qpdf_error_code_e = 4;
pub const qpdf_error_code_e_qpdf_e_damaged_pdf: qpdf_error_code_e = 5;
pub const qpdf_error_code_e_qpdf_e_pages: qpdf_error_code_e = 6;
pub const qpdf_error_code_e_qpdf_e_object: qpdf_error_code_e = 7;
pub const qpdf_error_code_e_qpdf_e_json: qpdf_error_code_e = 8;
pub const qpdf_error_code_e_qpdf_e_linearization: qpdf_error_code_e = 9;
pub type qpdf_error_code_e = ::std::os::raw::c_uint;
pub const qpdf_object_type_e_ot_uninitialized: qpdf_object_type_e = 0;
pub const qpdf_object_type_e_ot_reserved: qpdf_object_type_e = 1;
pub const qpdf_object_type_e_ot_null: qpdf_object_type_e = 2;
pub const qpdf_object_type_e_ot_boolean: qpdf_object_type_e = 3;
pub const qpdf_object_type_e_ot_integer: qpdf_object_type_e = 4;
pub const qpdf_object_type_e_ot_real: qpdf_object_type_e = 5;
pub const qpdf_object_type_e_ot_string: qpdf_object_type_e = 6;
pub const qpdf_object_type_e_ot_name: qpdf_object_type_e = 7;
pub const qpdf_object_type_e_ot_array: qpdf_object_type_e = 8;
pub const qpdf_object_type_e_ot_dictionary: qpdf_object_type_e = 9;
pub const qpdf_object_type_e_ot_stream: qpdf_object_type_e = 10;
pub const qpdf_object_type_e_ot_operator: qpdf_object_type_e = 11;
pub const qpdf_object_type_e_ot_inlineimage: qpdf_object_type_e = 12;
pub const qpdf_object_type_e_ot_unresolved: qpdf_object_type_e = 13;
pub const qpdf_object_type_e_ot_destroyed: qpdf_object_type_e = 14;
pub type qpdf_object_type_e = ::std::os::raw::c_uint;
pub const qpdf_object_stream_e_qpdf_o_disable: qpdf_object_stream_e = 0;
pub const qpdf_object_stream_e_qpdf_o_preserve: qpdf_object_stream_e = 1;
pub const qpdf_object_stream_e_qpdf_o_generate: qpdf_object_stream_e = 2;
pub type qpdf_object_stream_e = ::std::os::raw::c_uint;
pub const qpdf_stream_data_e_qpdf_s_uncompress: qpdf_stream_data_e = 0;
pub const qpdf_stream_data_e_qpdf_s_preserve: qpdf_stream_data_e = 1;
pub const qpdf_stream_data_e_qpdf_s_compress: qpdf_stream_data_e = 2;
pub type qpdf_stream_data_e = ::std::os::raw::c_uint;
pub const qpdf_stream_encode_flags_e_qpdf_ef_compress: qpdf_stream_encode_flags_e = 1;
pub const qpdf_stream_encode_flags_e_qpdf_ef_normalize: qpdf_stream_encode_flags_e = 2;
pub type qpdf_stream_encode_flags_e = ::std::os::raw::c_uint;
pub const qpdf_stream_decode_level_e_qpdf_dl_none: qpdf_stream_decode_level_e = 0;
pub const qpdf_stream_decode_level_e_qpdf_dl_generalized: qpdf_stream_decode_level_e = 1;
pub const qpdf_stream_decode_level_e_qpdf_dl_specialized: qpdf_stream_decode_level_e = 2;
pub const qpdf_stream_decode_level_e_qpdf_dl_all: qpdf_stream_decode_level_e = 3;
pub type qpdf_stream_decode_level_e = ::std::os::raw::c_uint;
pub const qpdf_json_stream_data_e_qpdf_sj_none: qpdf_json_stream_data_e = 0;
pub const qpdf_json_stream_data_e_qpdf_sj_inline: qpdf_json_stream_data_e = 1;
pub const qpdf_json_stream_data_e_qpdf_sj_file: qpdf_json_stream_data_e = 2;
pub type qpdf_json_stream_data_e = ::std::os::raw::c_uint;
pub const qpdf_r3_print_e_qpdf_r3p_full: qpdf_r3_print_e = 0;
pub const qpdf_r3_print_e_qpdf_r3p_low: qpdf_r3_print_e = 1;
pub const qpdf_r3_print_e_qpdf_r3p_none: qpdf_r3_print_e = 2;
pub type qpdf_r3_print_e = ::std::os::raw::c_uint;
pub const qpdf_r3_modify_e_qpdf_r3m_all: qpdf_r3_modify_e = 0;
pub const qpdf_r3_modify_e_qpdf_r3m_annotate: qpdf_r3_modify_e = 1;
pub const qpdf_r3_modify_e_qpdf_r3m_form: qpdf_r3_modify_e = 2;
pub const qpdf_r3_modify_e_qpdf_r3m_assembly: qpdf_r3_modify_e = 3;
pub const qpdf_r3_modify_e_qpdf_r3m_none: qpdf_r3_modify_e = 4;
pub type qpdf_r3_modify_e = ::std::os::raw::c_uint;
pub const pdf_form_field_flag_e_ff_all_read_only: pdf_form_field_flag_e = 1;
pub const pdf_form_field_flag_e_ff_all_required: pdf_form_field_flag_e = 2;
pub const pdf_form_field_flag_e_ff_all_no_export: pdf_form_field_flag_e = 4;
pub const pdf_form_field_flag_e_ff_btn_no_toggle_off: pdf_form_field_flag_e = 16384;
pub const pdf_form_field_flag_e_ff_btn_radio: pdf_form_field_flag_e = 32768;
pub const pdf_form_field_flag_e_ff_btn_pushbutton: pdf_form_field_flag_e = 65536;
pub const pdf_form_field_flag_e_ff_btn_radios_in_unison: pdf_form_field_flag_e = 131072;
pub const pdf_form_field_flag_e_ff_tx_multiline: pdf_form_field_flag_e = 4096;
pub const pdf_form_field_flag_e_ff_tx_password: pdf_form_field_flag_e = 8192;
pub const pdf_form_field_flag_e_ff_tx_file_select: pdf_form_field_flag_e = 1048576;
pub const pdf_form_field_flag_e_ff_tx_do_not_spell_check: pdf_form_field_flag_e = 4194304;
pub const pdf_form_field_flag_e_ff_tx_do_not_scroll: pdf_form_field_flag_e = 8388608;
pub const pdf_form_field_flag_e_ff_tx_comb: pdf_form_field_flag_e = 16777216;
pub const pdf_form_field_flag_e_ff_tx_rich_text: pdf_form_field_flag_e = 33554432;
pub const pdf_form_field_flag_e_ff_ch_combo: pdf_form_field_flag_e = 131072;
pub const pdf_form_field_flag_e_ff_ch_edit: pdf_form_field_flag_e = 262144;
pub const pdf_form_field_flag_e_ff_ch_sort: pdf_form_field_flag_e = 524288;
pub const pdf_form_field_flag_e_ff_ch_multi_select: pdf_form_field_flag_e = 2097152;
pub const pdf_form_field_flag_e_ff_ch_do_not_spell_check: pdf_form_field_flag_e = 4194304;
pub const pdf_form_field_flag_e_ff_ch_commit_on_sel_change: pdf_form_field_flag_e = 67108864;
pub type pdf_form_field_flag_e = ::std::os::raw::c_uint;
pub const pdf_annotation_flag_e_an_invisible: pdf_annotation_flag_e = 1;
pub const pdf_annotation_flag_e_an_hidden: pdf_annotation_flag_e = 2;
pub const pdf_annotation_flag_e_an_print: pdf_annotation_flag_e = 4;
pub const pdf_annotation_flag_e_an_no_zoom: pdf_annotation_flag_e = 8;
pub const pdf_annotation_flag_e_an_no_rotate: pdf_annotation_flag_e = 16;
pub const pdf_annotation_flag_e_an_no_view: pdf_annotation_flag_e = 32;
pub const pdf_annotation_flag_e_an_read_only: pdf_annotation_flag_e = 64;
pub const pdf_annotation_flag_e_an_locked: pdf_annotation_flag_e = 128;
pub const pdf_annotation_flag_e_an_toggle_no_view: pdf_annotation_flag_e = 256;
pub const pdf_annotation_flag_e_an_locked_contents: pdf_annotation_flag_e = 512;
pub type pdf_annotation_flag_e = ::std::os::raw::c_uint;
pub const qpdf_encryption_status_e_qpdf_es_encrypted: qpdf_encryption_status_e = 1;
pub const qpdf_encryption_status_e_qpdf_es_password_incorrect: qpdf_encryption_status_e = 2;
pub type qpdf_encryption_status_e = ::std::os::raw::c_uint;
pub type qpdf_offset_t = ::std::os::raw::c_longlong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        24usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _qpdflogger_handle {
    _unused: [u8; 0],
}
pub type qpdflogger_handle = *mut _qpdflogger_handle;
extern "C" {
    pub fn qpdflogger_default_logger() -> qpdflogger_handle;
}
extern "C" {
    pub fn qpdflogger_create() -> qpdflogger_handle;
}
extern "C" {
    pub fn qpdflogger_cleanup(l: *mut qpdflogger_handle);
}
pub const qpdf_log_dest_e_qpdf_log_dest_default: qpdf_log_dest_e = 0;
pub const qpdf_log_dest_e_qpdf_log_dest_stdout: qpdf_log_dest_e = 1;
pub const qpdf_log_dest_e_qpdf_log_dest_stderr: qpdf_log_dest_e = 2;
pub const qpdf_log_dest_e_qpdf_log_dest_discard: qpdf_log_dest_e = 3;
pub const qpdf_log_dest_e_qpdf_log_dest_custom: qpdf_log_dest_e = 4;
pub type qpdf_log_dest_e = ::std::os::raw::c_uint;
pub type qpdf_log_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_char,
        len: usize,
        udata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn qpdflogger_set_info(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdflogger_set_warn(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdflogger_set_error(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdflogger_set_save(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
        only_if_not_set: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qpdflogger_save_to_standard_output(l: qpdflogger_handle, only_if_not_set: ::std::os::raw::c_int);
}
extern "C" {
    pub fn qpdflogger_equal(l1: qpdflogger_handle, l2: qpdflogger_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: __locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: __locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(__src: *const ::std::os::raw::c_void, __dest: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _qpdf_data {
    _unused: [u8; 0],
}
pub type qpdf_data = *mut _qpdf_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _qpdf_error {
    _unused: [u8; 0],
}
pub type qpdf_error = *mut _qpdf_error;
pub type QPDF_ERROR_CODE = ::std::os::raw::c_int;
pub type QPDF_BOOL = ::std::os::raw::c_int;
extern "C" {
    pub fn qpdf_silence_errors(qpdf: qpdf_data);
}
extern "C" {
    pub fn qpdf_get_qpdf_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_init() -> qpdf_data;
}
extern "C" {
    pub fn qpdf_cleanup(qpdf: *mut qpdf_data);
}
extern "C" {
    pub fn qpdf_has_error(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_get_error(qpdf: qpdf_data) -> qpdf_error;
}
extern "C" {
    pub fn qpdf_more_warnings(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_next_warning(qpdf: qpdf_data) -> qpdf_error;
}
extern "C" {
    pub fn qpdf_get_error_full_text(q: qpdf_data, e: qpdf_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_error_code(q: qpdf_data, e: qpdf_error) -> qpdf_error_code_e;
}
extern "C" {
    pub fn qpdf_get_error_filename(q: qpdf_data, e: qpdf_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_error_file_position(q: qpdf_data, e: qpdf_error) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn qpdf_get_error_message_detail(q: qpdf_data, e: qpdf_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_set_suppress_warnings(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_logger(qpdf: qpdf_data, logger: qpdflogger_handle);
}
extern "C" {
    pub fn qpdf_get_logger(qpdf: qpdf_data) -> qpdflogger_handle;
}
extern "C" {
    pub fn qpdf_check_pdf(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_set_ignore_xref_streams(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_attempt_recovery(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_read(
        qpdf: qpdf_data,
        filename: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_read_memory(
        qpdf: qpdf_data,
        description: *const ::std::os::raw::c_char,
        buffer: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
        password: *const ::std::os::raw::c_char,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_empty_pdf(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_create_from_json_file(qpdf: qpdf_data, filename: *const ::std::os::raw::c_char) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_create_from_json_data(
        qpdf: qpdf_data,
        buffer: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_update_from_json_file(qpdf: qpdf_data, filename: *const ::std::os::raw::c_char) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_update_from_json_data(
        qpdf: qpdf_data,
        buffer: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_get_pdf_version(qpdf: qpdf_data) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_pdf_extension_level(qpdf: qpdf_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_get_user_password(qpdf: qpdf_data) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_info_key(qpdf: qpdf_data, key: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_set_info_key(qpdf: qpdf_data, key: *const ::std::os::raw::c_char, value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_is_linearized(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_is_encrypted(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_accessibility(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_extract_all(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_print_low_res(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_print_high_res(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_assembly(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_form(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_annotation(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_other(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_all(qpdf: qpdf_data) -> QPDF_BOOL;
}
pub type qpdf_write_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_char,
        len: usize,
        udata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn qpdf_write_json(
        qpdf: qpdf_data,
        version: ::std::os::raw::c_int,
        fn_: qpdf_write_fn_t,
        udata: *mut ::std::os::raw::c_void,
        decode_level: qpdf_stream_decode_level_e,
        json_stream_data: qpdf_json_stream_data_e,
        file_prefix: *const ::std::os::raw::c_char,
        wanted_objects: *const *const ::std::os::raw::c_char,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_init_write(qpdf: qpdf_data, filename: *const ::std::os::raw::c_char) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_init_write_memory(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_get_buffer_length(qpdf: qpdf_data) -> usize;
}
extern "C" {
    pub fn qpdf_get_buffer(qpdf: qpdf_data) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn qpdf_set_object_stream_mode(qpdf: qpdf_data, mode: qpdf_object_stream_e);
}
extern "C" {
    pub fn qpdf_set_stream_data_mode(qpdf: qpdf_data, mode: qpdf_stream_data_e);
}
extern "C" {
    pub fn qpdf_set_compress_streams(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_decode_level(qpdf: qpdf_data, level: qpdf_stream_decode_level_e);
}
extern "C" {
    pub fn qpdf_set_preserve_unreferenced_objects(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_newline_before_endstream(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_content_normalization(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_qdf_mode(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_deterministic_ID(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_static_ID(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_static_aes_IV(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_suppress_original_object_IDs(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_preserve_encryption(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_r2_encryption_parameters_insecure(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_print: QPDF_BOOL,
        allow_modify: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_annotate: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_r3_encryption_parameters_insecure(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
    );
}
extern "C" {
    pub fn qpdf_set_r4_encryption_parameters_insecure(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
        encrypt_metadata: QPDF_BOOL,
        use_aes: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_r5_encryption_parameters2(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
        encrypt_metadata: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_r6_encryption_parameters2(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
        encrypt_metadata: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_linearization(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_minimum_pdf_version(qpdf: qpdf_data, version: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_set_minimum_pdf_version_and_extension(
        qpdf: qpdf_data,
        version: *const ::std::os::raw::c_char,
        extension_level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qpdf_force_pdf_version(qpdf: qpdf_data, version: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_force_pdf_version_and_extension(
        qpdf: qpdf_data,
        version: *const ::std::os::raw::c_char,
        extension_level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qpdf_register_progress_reporter(
        qpdf: qpdf_data,
        report_progress: ::std::option::Option<
            unsafe extern "C" fn(percent: ::std::os::raw::c_int, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdf_write(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
pub type qpdf_oh = ::std::os::raw::c_uint;
extern "C" {
    pub fn qpdf_oh_release(qpdf: qpdf_data, oh: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_release_all(qpdf: qpdf_data);
}
extern "C" {
    pub fn qpdf_oh_new_object(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_get_trailer(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_get_root(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_get_object_by_id(
        qpdf: qpdf_data,
        objid: ::std::os::raw::c_int,
        generation: ::std::os::raw::c_int,
    ) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_make_indirect_object(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_replace_object(
        qpdf: qpdf_data,
        objid: ::std::os::raw::c_int,
        generation: ::std::os::raw::c_int,
        oh: qpdf_oh,
    );
}
extern "C" {
    pub fn qpdf_oh_is_initialized(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_bool(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_null(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_integer(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_real(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_name(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_string(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_operator(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_inline_image(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_array(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_dictionary(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_stream(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_indirect(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_scalar(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_name_and_equals(qpdf: qpdf_data, oh: qpdf_oh, name: *const ::std::os::raw::c_char) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_dictionary_of_type(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        type_: *const ::std::os::raw::c_char,
        subtype: *const ::std::os::raw::c_char,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_type_code(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_object_type_e;
}
extern "C" {
    pub fn qpdf_oh_get_type_name(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_wrap_in_array(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_parse(qpdf: qpdf_data, object_str: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_bool_value(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_bool(qpdf: qpdf_data, oh: qpdf_oh, value: *mut QPDF_BOOL) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_int_value(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_longlong(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut ::std::os::raw::c_longlong,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_int_value_as_int(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_int(qpdf: qpdf_data, oh: qpdf_oh, value: *mut ::std::os::raw::c_int) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_uint_value(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_ulonglong(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut ::std::os::raw::c_ulonglong,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_uint_value_as_uint(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_uint(qpdf: qpdf_data, oh: qpdf_oh, value: *mut ::std::os::raw::c_uint) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_real_value(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_real(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_number(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_numeric_value(qpdf: qpdf_data, oh: qpdf_oh) -> f64;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_number(qpdf: qpdf_data, oh: qpdf_oh, value: *mut f64) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_name(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_name(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_get_last_string_length(qpdf: qpdf_data) -> usize;
}
extern "C" {
    pub fn qpdf_oh_get_string_value(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_string(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_utf8_value(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_utf8(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_binary_string_value(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_binary_utf8_value(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_array_n_items(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_get_array_item(qpdf: qpdf_data, oh: qpdf_oh, n: ::std::os::raw::c_int) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_begin_dict_key_iter(qpdf: qpdf_data, dict: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_dict_more_keys(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_dict_next_key(qpdf: qpdf_data) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_has_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_key_if_dict(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_is_or_has_name(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_new_uninitialized(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_null(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_bool(qpdf: qpdf_data, value: QPDF_BOOL) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_integer(qpdf: qpdf_data, value: ::std::os::raw::c_longlong) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_real_from_string(qpdf: qpdf_data, value: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_real_from_double(qpdf: qpdf_data, value: f64, decimal_places: ::std::os::raw::c_int) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_name(qpdf: qpdf_data, name: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_string(qpdf: qpdf_data, str_: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_unicode_string(qpdf: qpdf_data, utf8_str: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_binary_string(qpdf: qpdf_data, str_: *const ::std::os::raw::c_char, length: usize) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_binary_unicode_string(
        qpdf: qpdf_data,
        str_: *const ::std::os::raw::c_char,
        length: usize,
    ) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_array(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_dictionary(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_stream(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_make_direct(qpdf: qpdf_data, oh: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_set_array_item(qpdf: qpdf_data, oh: qpdf_oh, at: ::std::os::raw::c_int, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_insert_item(qpdf: qpdf_data, oh: qpdf_oh, at: ::std::os::raw::c_int, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_append_item(qpdf: qpdf_data, oh: qpdf_oh, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_erase_item(qpdf: qpdf_data, oh: qpdf_oh, at: ::std::os::raw::c_int);
}
extern "C" {
    pub fn qpdf_oh_replace_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_remove_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_oh_replace_or_remove_key(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        key: *const ::std::os::raw::c_char,
        item: qpdf_oh,
    );
}
extern "C" {
    pub fn qpdf_oh_get_dict(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_object_id(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_get_generation(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_unparse(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_unparse_resolved(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_unparse_binary(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_copy_foreign_object(qpdf: qpdf_data, other_qpdf: qpdf_data, foreign_oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_stream_data(
        qpdf: qpdf_data,
        stream_oh: qpdf_oh,
        decode_level: qpdf_stream_decode_level_e,
        filtered: *mut QPDF_BOOL,
        bufp: *mut *mut ::std::os::raw::c_uchar,
        len: *mut usize,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_oh_get_page_content_data(
        qpdf: qpdf_data,
        page_oh: qpdf_oh,
        bufp: *mut *mut ::std::os::raw::c_uchar,
        len: *mut usize,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_oh_replace_stream_data(
        qpdf: qpdf_data,
        stream_oh: qpdf_oh,
        buf: *const ::std::os::raw::c_uchar,
        len: usize,
        filter: qpdf_oh,
        decode_parms: qpdf_oh,
    );
}
extern "C" {
    pub fn qpdf_get_num_pages(qpdf: qpdf_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_get_page_n(qpdf: qpdf_data, zero_based_index: usize) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_update_all_pages_cache(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_find_page_by_id(
        qpdf: qpdf_data,
        objid: ::std::os::raw::c_int,
        generation: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_find_page_by_oh(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_push_inherited_attributes_to_page(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_add_page(
        qpdf: qpdf_data,
        newpage_qpdf: qpdf_data,
        newpage: qpdf_oh,
        first: QPDF_BOOL,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_add_page_at(
        qpdf: qpdf_data,
        newpage_qpdf: qpdf_data,
        newpage: qpdf_oh,
        before: QPDF_BOOL,
        refpage: qpdf_oh,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_remove_page(qpdf: qpdf_data, page: qpdf_oh) -> QPDF_ERROR_CODE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
