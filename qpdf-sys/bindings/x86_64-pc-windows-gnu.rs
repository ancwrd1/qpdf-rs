/* automatically generated by rust-bindgen 0.69.1 */

pub const QPDF_MAJOR_VERSION: u32 = 11;
pub const QPDF_MINOR_VERSION: u32 = 6;
pub const QPDF_PATCH_VERSION: u32 = 4;
pub const QPDF_VERSION: &[u8; 7] = b"11.6.4\0";
pub const __MINGW64_VERSION_MAJOR: u32 = 11;
pub const __MINGW64_VERSION_MINOR: u32 = 0;
pub const __MINGW64_VERSION_BUGFIX: u32 = 1;
pub const __MINGW64_VERSION_RC: u32 = 0;
pub const __MINGW64_VERSION_STATE: &[u8; 6] = b"alpha\0";
pub const __MINGW32_MAJOR_VERSION: u32 = 3;
pub const __MINGW32_MINOR_VERSION: u32 = 11;
pub const _M_AMD64: u32 = 100;
pub const _M_X64: u32 = 100;
pub const __: u32 = 1;
pub const __MINGW_USE_UNDERSCORE_PREFIX: u32 = 0;
pub const __MINGW_HAVE_ANSI_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_ANSI_C99_SCANF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_SCANF: u32 = 1;
pub const __MINGW_SEC_WARN_STR: &[u8; 92] =
    b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\0";
pub const __MINGW_MSVC2005_DEPREC_STR : & [u8 ; 117] = b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\0" ;
pub const __MINGW_FORTIFY_LEVEL: u32 = 0;
pub const __MINGW_FORTIFY_VA_ARG: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const __USE_CRTIMP: u32 = 1;
pub const USE___UUIDOF: u32 = 0;
pub const __CRT__NO_INLINE: u32 = 1;
pub const __MSVCRT_VERSION__: u32 = 1792;
pub const _WIN32_WINNT: u32 = 2560;
pub const MINGW_HAS_SECURE_API: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const MINGW_HAS_DDK_H: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 253;
pub const _ARGMAX: u32 = 100;
pub const __USE_MINGW_ANSI_STDIO: u32 = 1;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const QPDF_SUCCESS: u32 = 0;
pub const QPDF_WARNINGS: u32 = 1;
pub const QPDF_ERRORS: u32 = 2;
pub const QPDF_TRUE: u32 = 1;
pub const QPDF_FALSE: u32 = 0;
pub const qpdf_exit_code_e_qpdf_exit_success: qpdf_exit_code_e = 0;
pub const qpdf_exit_code_e_qpdf_exit_error: qpdf_exit_code_e = 2;
pub const qpdf_exit_code_e_qpdf_exit_warning: qpdf_exit_code_e = 3;
pub const qpdf_exit_code_e_qpdf_exit_is_not_encrypted: qpdf_exit_code_e = 2;
pub const qpdf_exit_code_e_qpdf_exit_correct_password: qpdf_exit_code_e = 3;
pub type qpdf_exit_code_e = ::std::os::raw::c_uint;
pub const qpdf_error_code_e_qpdf_e_success: qpdf_error_code_e = 0;
pub const qpdf_error_code_e_qpdf_e_internal: qpdf_error_code_e = 1;
pub const qpdf_error_code_e_qpdf_e_system: qpdf_error_code_e = 2;
pub const qpdf_error_code_e_qpdf_e_unsupported: qpdf_error_code_e = 3;
pub const qpdf_error_code_e_qpdf_e_password: qpdf_error_code_e = 4;
pub const qpdf_error_code_e_qpdf_e_damaged_pdf: qpdf_error_code_e = 5;
pub const qpdf_error_code_e_qpdf_e_pages: qpdf_error_code_e = 6;
pub const qpdf_error_code_e_qpdf_e_object: qpdf_error_code_e = 7;
pub const qpdf_error_code_e_qpdf_e_json: qpdf_error_code_e = 8;
pub const qpdf_error_code_e_qpdf_e_linearization: qpdf_error_code_e = 9;
pub type qpdf_error_code_e = ::std::os::raw::c_uint;
pub const qpdf_object_type_e_ot_uninitialized: qpdf_object_type_e = 0;
pub const qpdf_object_type_e_ot_reserved: qpdf_object_type_e = 1;
pub const qpdf_object_type_e_ot_null: qpdf_object_type_e = 2;
pub const qpdf_object_type_e_ot_boolean: qpdf_object_type_e = 3;
pub const qpdf_object_type_e_ot_integer: qpdf_object_type_e = 4;
pub const qpdf_object_type_e_ot_real: qpdf_object_type_e = 5;
pub const qpdf_object_type_e_ot_string: qpdf_object_type_e = 6;
pub const qpdf_object_type_e_ot_name: qpdf_object_type_e = 7;
pub const qpdf_object_type_e_ot_array: qpdf_object_type_e = 8;
pub const qpdf_object_type_e_ot_dictionary: qpdf_object_type_e = 9;
pub const qpdf_object_type_e_ot_stream: qpdf_object_type_e = 10;
pub const qpdf_object_type_e_ot_operator: qpdf_object_type_e = 11;
pub const qpdf_object_type_e_ot_inlineimage: qpdf_object_type_e = 12;
pub const qpdf_object_type_e_ot_unresolved: qpdf_object_type_e = 13;
pub const qpdf_object_type_e_ot_destroyed: qpdf_object_type_e = 14;
pub type qpdf_object_type_e = ::std::os::raw::c_uint;
pub const qpdf_object_stream_e_qpdf_o_disable: qpdf_object_stream_e = 0;
pub const qpdf_object_stream_e_qpdf_o_preserve: qpdf_object_stream_e = 1;
pub const qpdf_object_stream_e_qpdf_o_generate: qpdf_object_stream_e = 2;
pub type qpdf_object_stream_e = ::std::os::raw::c_uint;
pub const qpdf_stream_data_e_qpdf_s_uncompress: qpdf_stream_data_e = 0;
pub const qpdf_stream_data_e_qpdf_s_preserve: qpdf_stream_data_e = 1;
pub const qpdf_stream_data_e_qpdf_s_compress: qpdf_stream_data_e = 2;
pub type qpdf_stream_data_e = ::std::os::raw::c_uint;
pub const qpdf_stream_encode_flags_e_qpdf_ef_compress: qpdf_stream_encode_flags_e = 1;
pub const qpdf_stream_encode_flags_e_qpdf_ef_normalize: qpdf_stream_encode_flags_e = 2;
pub type qpdf_stream_encode_flags_e = ::std::os::raw::c_uint;
pub const qpdf_stream_decode_level_e_qpdf_dl_none: qpdf_stream_decode_level_e = 0;
pub const qpdf_stream_decode_level_e_qpdf_dl_generalized: qpdf_stream_decode_level_e = 1;
pub const qpdf_stream_decode_level_e_qpdf_dl_specialized: qpdf_stream_decode_level_e = 2;
pub const qpdf_stream_decode_level_e_qpdf_dl_all: qpdf_stream_decode_level_e = 3;
pub type qpdf_stream_decode_level_e = ::std::os::raw::c_uint;
pub const qpdf_json_stream_data_e_qpdf_sj_none: qpdf_json_stream_data_e = 0;
pub const qpdf_json_stream_data_e_qpdf_sj_inline: qpdf_json_stream_data_e = 1;
pub const qpdf_json_stream_data_e_qpdf_sj_file: qpdf_json_stream_data_e = 2;
pub type qpdf_json_stream_data_e = ::std::os::raw::c_uint;
pub const qpdf_r3_print_e_qpdf_r3p_full: qpdf_r3_print_e = 0;
pub const qpdf_r3_print_e_qpdf_r3p_low: qpdf_r3_print_e = 1;
pub const qpdf_r3_print_e_qpdf_r3p_none: qpdf_r3_print_e = 2;
pub type qpdf_r3_print_e = ::std::os::raw::c_uint;
pub const qpdf_r3_modify_e_qpdf_r3m_all: qpdf_r3_modify_e = 0;
pub const qpdf_r3_modify_e_qpdf_r3m_annotate: qpdf_r3_modify_e = 1;
pub const qpdf_r3_modify_e_qpdf_r3m_form: qpdf_r3_modify_e = 2;
pub const qpdf_r3_modify_e_qpdf_r3m_assembly: qpdf_r3_modify_e = 3;
pub const qpdf_r3_modify_e_qpdf_r3m_none: qpdf_r3_modify_e = 4;
pub type qpdf_r3_modify_e = ::std::os::raw::c_uint;
pub const pdf_form_field_flag_e_ff_all_read_only: pdf_form_field_flag_e = 1;
pub const pdf_form_field_flag_e_ff_all_required: pdf_form_field_flag_e = 2;
pub const pdf_form_field_flag_e_ff_all_no_export: pdf_form_field_flag_e = 4;
pub const pdf_form_field_flag_e_ff_btn_no_toggle_off: pdf_form_field_flag_e = 16384;
pub const pdf_form_field_flag_e_ff_btn_radio: pdf_form_field_flag_e = 32768;
pub const pdf_form_field_flag_e_ff_btn_pushbutton: pdf_form_field_flag_e = 65536;
pub const pdf_form_field_flag_e_ff_btn_radios_in_unison: pdf_form_field_flag_e = 131072;
pub const pdf_form_field_flag_e_ff_tx_multiline: pdf_form_field_flag_e = 4096;
pub const pdf_form_field_flag_e_ff_tx_password: pdf_form_field_flag_e = 8192;
pub const pdf_form_field_flag_e_ff_tx_file_select: pdf_form_field_flag_e = 1048576;
pub const pdf_form_field_flag_e_ff_tx_do_not_spell_check: pdf_form_field_flag_e = 4194304;
pub const pdf_form_field_flag_e_ff_tx_do_not_scroll: pdf_form_field_flag_e = 8388608;
pub const pdf_form_field_flag_e_ff_tx_comb: pdf_form_field_flag_e = 16777216;
pub const pdf_form_field_flag_e_ff_tx_rich_text: pdf_form_field_flag_e = 33554432;
pub const pdf_form_field_flag_e_ff_ch_combo: pdf_form_field_flag_e = 131072;
pub const pdf_form_field_flag_e_ff_ch_edit: pdf_form_field_flag_e = 262144;
pub const pdf_form_field_flag_e_ff_ch_sort: pdf_form_field_flag_e = 524288;
pub const pdf_form_field_flag_e_ff_ch_multi_select: pdf_form_field_flag_e = 2097152;
pub const pdf_form_field_flag_e_ff_ch_do_not_spell_check: pdf_form_field_flag_e = 4194304;
pub const pdf_form_field_flag_e_ff_ch_commit_on_sel_change: pdf_form_field_flag_e = 67108864;
pub type pdf_form_field_flag_e = ::std::os::raw::c_uint;
pub const pdf_annotation_flag_e_an_invisible: pdf_annotation_flag_e = 1;
pub const pdf_annotation_flag_e_an_hidden: pdf_annotation_flag_e = 2;
pub const pdf_annotation_flag_e_an_print: pdf_annotation_flag_e = 4;
pub const pdf_annotation_flag_e_an_no_zoom: pdf_annotation_flag_e = 8;
pub const pdf_annotation_flag_e_an_no_rotate: pdf_annotation_flag_e = 16;
pub const pdf_annotation_flag_e_an_no_view: pdf_annotation_flag_e = 32;
pub const pdf_annotation_flag_e_an_read_only: pdf_annotation_flag_e = 64;
pub const pdf_annotation_flag_e_an_locked: pdf_annotation_flag_e = 128;
pub const pdf_annotation_flag_e_an_toggle_no_view: pdf_annotation_flag_e = 256;
pub const pdf_annotation_flag_e_an_locked_contents: pdf_annotation_flag_e = 512;
pub type pdf_annotation_flag_e = ::std::os::raw::c_uint;
pub const qpdf_encryption_status_e_qpdf_es_encrypted: qpdf_encryption_status_e = 1;
pub const qpdf_encryption_status_e_qpdf_es_password_incorrect: qpdf_encryption_status_e = 2;
pub type qpdf_encryption_status_e = ::std::os::raw::c_uint;
pub type qpdf_offset_t = ::std::os::raw::c_longlong;
pub type wchar_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _qpdflogger_handle {
    _unused: [u8; 0],
}
pub type qpdflogger_handle = *mut _qpdflogger_handle;
extern "C" {
    pub fn qpdflogger_default_logger() -> qpdflogger_handle;
}
extern "C" {
    pub fn qpdflogger_create() -> qpdflogger_handle;
}
extern "C" {
    pub fn qpdflogger_cleanup(l: *mut qpdflogger_handle);
}
pub const qpdf_log_dest_e_qpdf_log_dest_default: qpdf_log_dest_e = 0;
pub const qpdf_log_dest_e_qpdf_log_dest_stdout: qpdf_log_dest_e = 1;
pub const qpdf_log_dest_e_qpdf_log_dest_stderr: qpdf_log_dest_e = 2;
pub const qpdf_log_dest_e_qpdf_log_dest_discard: qpdf_log_dest_e = 3;
pub const qpdf_log_dest_e_qpdf_log_dest_custom: qpdf_log_dest_e = 4;
pub type qpdf_log_dest_e = ::std::os::raw::c_uint;
pub type qpdf_log_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_char,
        len: usize,
        udata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn qpdflogger_set_info(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdflogger_set_warn(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdflogger_set_error(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdflogger_set_save(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
        only_if_not_set: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qpdflogger_save_to_standard_output(l: qpdflogger_handle, only_if_not_set: ::std::os::raw::c_int);
}
extern "C" {
    pub fn qpdflogger_equal(l1: qpdflogger_handle, l2: qpdflogger_handle) -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
extern "C" {
    pub fn __mingw_get_crt_info() -> *const ::std::os::raw::c_char;
}
pub type rsize_t = usize;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadmbcinfostruct {
    _unused: [u8; 0],
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lc_time_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct localeinfo_struct {
    pub locinfo: pthreadlocinfo,
    pub mbcinfo: pthreadmbcinfo,
}
#[test]
fn bindgen_test_layout_localeinfo_struct() {
    const UNINIT: ::std::mem::MaybeUninit<localeinfo_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<localeinfo_struct>(),
        16usize,
        concat!("Size of: ", stringify!(localeinfo_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<localeinfo_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(localeinfo_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(localeinfo_struct),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(localeinfo_struct),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_tstruct = localeinfo_struct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLC_ID {
    pub wLanguage: ::std::os::raw::c_ushort,
    pub wCountry: ::std::os::raw::c_ushort,
    pub wCodePage: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_tagLC_ID() {
    const UNINIT: ::std::mem::MaybeUninit<tagLC_ID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagLC_ID>(),
        6usize,
        concat!("Size of: ", stringify!(tagLC_ID))
    );
    assert_eq!(
        ::std::mem::align_of::<tagLC_ID>(),
        2usize,
        concat!("Alignment of ", stringify!(tagLC_ID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wLanguage) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tagLC_ID), "::", stringify!(wLanguage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wCountry) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(tagLC_ID), "::", stringify!(wCountry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wCodePage) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(tagLC_ID), "::", stringify!(wCodePage))
    );
}
pub type LC_ID = tagLC_ID;
pub type LPLC_ID = *mut tagLC_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct {
    pub refcount: ::std::os::raw::c_int,
    pub lc_codepage: ::std::os::raw::c_uint,
    pub lc_collate_cp: ::std::os::raw::c_uint,
    pub lc_handle: [::std::os::raw::c_ulong; 6usize],
    pub lc_id: [LC_ID; 6usize],
    pub lc_category: [threadlocaleinfostruct__bindgen_ty_1; 6usize],
    pub lc_clike: ::std::os::raw::c_int,
    pub mb_cur_max: ::std::os::raw::c_int,
    pub lconv_intl_refcount: *mut ::std::os::raw::c_int,
    pub lconv_num_refcount: *mut ::std::os::raw::c_int,
    pub lconv_mon_refcount: *mut ::std::os::raw::c_int,
    pub lconv: *mut lconv,
    pub ctype1_refcount: *mut ::std::os::raw::c_int,
    pub ctype1: *mut ::std::os::raw::c_ushort,
    pub pctype: *const ::std::os::raw::c_ushort,
    pub pclmap: *const ::std::os::raw::c_uchar,
    pub pcumap: *const ::std::os::raw::c_uchar,
    pub lc_time_curr: *mut __lc_time_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct__bindgen_ty_1 {
    pub locale: *mut ::std::os::raw::c_char,
    pub wlocale: *mut wchar_t,
    pub refcount: *mut ::std::os::raw::c_int,
    pub wrefcount: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_threadlocaleinfostruct__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<threadlocaleinfostruct__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<threadlocaleinfostruct__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(threadlocaleinfostruct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<threadlocaleinfostruct__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(threadlocaleinfostruct__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locale) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1),
            "::",
            stringify!(locale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wlocale) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1),
            "::",
            stringify!(wlocale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrefcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1),
            "::",
            stringify!(wrefcount)
        )
    );
}
#[test]
fn bindgen_test_layout_threadlocaleinfostruct() {
    const UNINIT: ::std::mem::MaybeUninit<threadlocaleinfostruct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<threadlocaleinfostruct>(),
        352usize,
        concat!("Size of: ", stringify!(threadlocaleinfostruct))
    );
    assert_eq!(
        ::std::mem::align_of::<threadlocaleinfostruct>(),
        8usize,
        concat!("Alignment of ", stringify!(threadlocaleinfostruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_codepage) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_codepage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_collate_cp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_collate_cp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_handle) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_id) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_category) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_category)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_clike) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_clike)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mb_cur_max) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lconv_intl_refcount) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lconv_intl_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lconv_num_refcount) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lconv_num_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lconv_mon_refcount) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lconv_mon_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lconv) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lconv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctype1_refcount) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(ctype1_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctype1) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(ctype1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctype) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pclmap) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(pclmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcumap) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(pcumap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_time_curr) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(threadlocaleinfostruct),
            "::",
            stringify!(lc_time_curr)
        )
    );
}
pub type threadlocinfo = threadlocaleinfostruct;
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcpy_s(
        _dest: *mut ::std::os::raw::c_void,
        _numberOfElements: usize,
        _src: *const ::std::os::raw::c_void,
        _count: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn mempcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strset(_Str: *mut ::std::os::raw::c_char, _Val: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_l(
        _Str: *mut ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcpy(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strnlen(_Str: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _strdup(_Src: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(_Str: *const ::std::os::raw::c_char, _Val: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strerror(_ErrMsg: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlwr_l(_String: *mut ::std::os::raw::c_char, _Locale: _locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strnset(
        _Str: *mut ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strnset_l(
        str_: *mut ::std::os::raw::c_char,
        c: ::std::os::raw::c_int,
        count: usize,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(_Str: *const ::std::os::raw::c_char, _Ch: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        _Str: *mut ::std::os::raw::c_char,
        _Delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        _Str: *mut ::std::os::raw::c_char,
        _Delim: *const ::std::os::raw::c_char,
        __last: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_l(_String: *mut ::std::os::raw::c_char, _Locale: _locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Dst: *mut ::std::os::raw::c_char,
        _Src: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(
        _Dst: *mut ::std::os::raw::c_char,
        _Src: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(_Src: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(
        _Str: *mut ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(_Str: *mut ::std::os::raw::c_char, _Val: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _wcsdup(_Str: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Dest: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn wcscmp(
        _Str1: *const ::std::os::raw::c_ushort,
        _Str2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Dest: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_Str: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcslen(_Str: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Src: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat(_Dest: *mut wchar_t, _Source: *const wchar_t, _Count: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _Str1: *const ::std::os::raw::c_ushort,
        _Str2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(_Dest: *mut wchar_t, _Source: *const wchar_t, _Count: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsncpy_l(_Dest: *mut wchar_t, _Source: *const wchar_t, _Count: usize, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_Str: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_Str: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(_Str: *mut wchar_t, _Delim: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrNum: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror(_Str: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsicmp(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(_Str1: *const wchar_t, _Str2: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset(_Str: *mut wchar_t, _Val: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset(_Str: *mut wchar_t, _Val: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(_Dst: *mut wchar_t, _Src: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _wcsxfrm_l(_Dst: *mut wchar_t, _Src: *const wchar_t, _MaxCount: usize, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn wcscoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(_Str1: *const wchar_t, _Str2: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(_Str1: *const wchar_t, _Str2: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_Str: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_Str: *mut wchar_t, _Val: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_Str: *mut wchar_t, _Val: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strset_s(_Dst: *mut ::std::os::raw::c_char, _DstSize: usize, _Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _strerror_s(
        _Buf: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrMsg: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buf: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrNum: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_s(_Str: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strlwr_s_l(_Str: *mut ::std::os::raw::c_char, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _strnset_s(
        _Str: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_s(_Str: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strupr_s_l(_Str: *mut ::std::os::raw::c_char, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInChars: usize,
        _Src: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _strncat_s_l(
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInChars: usize,
        _Src: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strcpy_s(
        _Dst: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Src: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInChars: usize,
        _Src: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _strncpy_s_l(
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInChars: usize,
        _Src: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _Str: *mut ::std::os::raw::c_char,
        _Delim: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strtok_s_l(
        _Str: *mut ::std::os::raw::c_char,
        _Delim: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat_s(
        _Dst: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Src: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn memmove_s(
        _dest: *mut ::std::os::raw::c_void,
        _numberOfElements: usize,
        _src: *const ::std::os::raw::c_void,
        _count: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(_Str: *mut wchar_t, _Delim: *const wchar_t, _Context: *mut *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(_Buf: *mut wchar_t, _SizeInWords: usize, _ErrNum: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __wcserror_s(_Buffer: *mut wchar_t, _SizeInWords: usize, _ErrMsg: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsnset_s(_Dst: *mut wchar_t, _DstSizeInWords: usize, _Val: wchar_t, _MaxCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsset_s(_Str: *mut wchar_t, _SizeInWords: usize, _Val: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_s(_Str: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_Str: *mut wchar_t, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_s(_Str: *mut wchar_t, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_Str: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(_Dst: *mut wchar_t, _SizeInWords: rsize_t, _Src: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn wcscat_s(_Dst: *mut wchar_t, _SizeInWords: rsize_t, _Src: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(_Dst: *mut wchar_t, _DstSizeInChars: usize, _Src: *const wchar_t, _MaxCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsncat_s_l(
        _Dst: *mut wchar_t,
        _DstSizeInChars: usize,
        _Src: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(_Dst: *mut wchar_t, _DstSizeInChars: usize, _Src: *const wchar_t, _MaxCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsncpy_s_l(
        _Dst: *mut wchar_t,
        _DstSizeInChars: usize,
        _Src: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstok_s_l(
        _Str: *mut wchar_t,
        _Delim: *const wchar_t,
        _Context: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s_l(_Str: *mut wchar_t, _SizeInChars: usize, _Val: wchar_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsnset_s_l(
        _Str: *mut wchar_t,
        _SizeInChars: usize,
        _Val: wchar_t,
        _Count: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _qpdf_data {
    _unused: [u8; 0],
}
pub type qpdf_data = *mut _qpdf_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _qpdf_error {
    _unused: [u8; 0],
}
pub type qpdf_error = *mut _qpdf_error;
pub type QPDF_ERROR_CODE = ::std::os::raw::c_int;
pub type QPDF_BOOL = ::std::os::raw::c_int;
extern "C" {
    pub fn qpdf_silence_errors(qpdf: qpdf_data);
}
extern "C" {
    pub fn qpdf_get_qpdf_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_init() -> qpdf_data;
}
extern "C" {
    pub fn qpdf_cleanup(qpdf: *mut qpdf_data);
}
extern "C" {
    pub fn qpdf_has_error(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_get_error(qpdf: qpdf_data) -> qpdf_error;
}
extern "C" {
    pub fn qpdf_more_warnings(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_next_warning(qpdf: qpdf_data) -> qpdf_error;
}
extern "C" {
    pub fn qpdf_get_error_full_text(q: qpdf_data, e: qpdf_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_error_code(q: qpdf_data, e: qpdf_error) -> qpdf_error_code_e;
}
extern "C" {
    pub fn qpdf_get_error_filename(q: qpdf_data, e: qpdf_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_error_file_position(q: qpdf_data, e: qpdf_error) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn qpdf_get_error_message_detail(q: qpdf_data, e: qpdf_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_set_suppress_warnings(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_logger(qpdf: qpdf_data, logger: qpdflogger_handle);
}
extern "C" {
    pub fn qpdf_get_logger(qpdf: qpdf_data) -> qpdflogger_handle;
}
extern "C" {
    pub fn qpdf_check_pdf(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_set_ignore_xref_streams(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_attempt_recovery(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_read(
        qpdf: qpdf_data,
        filename: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_read_memory(
        qpdf: qpdf_data,
        description: *const ::std::os::raw::c_char,
        buffer: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
        password: *const ::std::os::raw::c_char,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_empty_pdf(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_create_from_json_file(qpdf: qpdf_data, filename: *const ::std::os::raw::c_char) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_create_from_json_data(
        qpdf: qpdf_data,
        buffer: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_update_from_json_file(qpdf: qpdf_data, filename: *const ::std::os::raw::c_char) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_update_from_json_data(
        qpdf: qpdf_data,
        buffer: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_get_pdf_version(qpdf: qpdf_data) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_pdf_extension_level(qpdf: qpdf_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_get_user_password(qpdf: qpdf_data) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_info_key(qpdf: qpdf_data, key: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_set_info_key(qpdf: qpdf_data, key: *const ::std::os::raw::c_char, value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_is_linearized(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_is_encrypted(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_accessibility(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_extract_all(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_print_low_res(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_print_high_res(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_assembly(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_form(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_annotation(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_other(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_all(qpdf: qpdf_data) -> QPDF_BOOL;
}
pub type qpdf_write_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_char,
        len: usize,
        udata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn qpdf_write_json(
        qpdf: qpdf_data,
        version: ::std::os::raw::c_int,
        fn_: qpdf_write_fn_t,
        udata: *mut ::std::os::raw::c_void,
        decode_level: qpdf_stream_decode_level_e,
        json_stream_data: qpdf_json_stream_data_e,
        file_prefix: *const ::std::os::raw::c_char,
        wanted_objects: *const *const ::std::os::raw::c_char,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_init_write(qpdf: qpdf_data, filename: *const ::std::os::raw::c_char) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_init_write_memory(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_get_buffer_length(qpdf: qpdf_data) -> usize;
}
extern "C" {
    pub fn qpdf_get_buffer(qpdf: qpdf_data) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn qpdf_set_object_stream_mode(qpdf: qpdf_data, mode: qpdf_object_stream_e);
}
extern "C" {
    pub fn qpdf_set_stream_data_mode(qpdf: qpdf_data, mode: qpdf_stream_data_e);
}
extern "C" {
    pub fn qpdf_set_compress_streams(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_decode_level(qpdf: qpdf_data, level: qpdf_stream_decode_level_e);
}
extern "C" {
    pub fn qpdf_set_preserve_unreferenced_objects(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_newline_before_endstream(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_content_normalization(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_qdf_mode(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_deterministic_ID(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_static_ID(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_static_aes_IV(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_suppress_original_object_IDs(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_preserve_encryption(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_r2_encryption_parameters_insecure(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_print: QPDF_BOOL,
        allow_modify: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_annotate: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_r3_encryption_parameters_insecure(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
    );
}
extern "C" {
    pub fn qpdf_set_r4_encryption_parameters_insecure(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
        encrypt_metadata: QPDF_BOOL,
        use_aes: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_r5_encryption_parameters2(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
        encrypt_metadata: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_r6_encryption_parameters2(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
        encrypt_metadata: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_linearization(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_minimum_pdf_version(qpdf: qpdf_data, version: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_set_minimum_pdf_version_and_extension(
        qpdf: qpdf_data,
        version: *const ::std::os::raw::c_char,
        extension_level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qpdf_force_pdf_version(qpdf: qpdf_data, version: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_force_pdf_version_and_extension(
        qpdf: qpdf_data,
        version: *const ::std::os::raw::c_char,
        extension_level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qpdf_register_progress_reporter(
        qpdf: qpdf_data,
        report_progress: ::std::option::Option<
            unsafe extern "C" fn(percent: ::std::os::raw::c_int, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdf_write(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
pub type qpdf_oh = ::std::os::raw::c_uint;
extern "C" {
    pub fn qpdf_oh_release(qpdf: qpdf_data, oh: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_release_all(qpdf: qpdf_data);
}
extern "C" {
    pub fn qpdf_oh_new_object(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_get_trailer(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_get_root(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_get_object_by_id(
        qpdf: qpdf_data,
        objid: ::std::os::raw::c_int,
        generation: ::std::os::raw::c_int,
    ) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_make_indirect_object(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_replace_object(
        qpdf: qpdf_data,
        objid: ::std::os::raw::c_int,
        generation: ::std::os::raw::c_int,
        oh: qpdf_oh,
    );
}
extern "C" {
    pub fn qpdf_oh_is_initialized(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_bool(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_null(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_integer(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_real(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_name(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_string(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_operator(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_inline_image(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_array(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_dictionary(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_stream(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_indirect(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_scalar(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_name_and_equals(qpdf: qpdf_data, oh: qpdf_oh, name: *const ::std::os::raw::c_char) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_dictionary_of_type(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        type_: *const ::std::os::raw::c_char,
        subtype: *const ::std::os::raw::c_char,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_type_code(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_object_type_e;
}
extern "C" {
    pub fn qpdf_oh_get_type_name(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_wrap_in_array(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_parse(qpdf: qpdf_data, object_str: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_bool_value(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_bool(qpdf: qpdf_data, oh: qpdf_oh, value: *mut QPDF_BOOL) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_int_value(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_longlong(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut ::std::os::raw::c_longlong,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_int_value_as_int(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_int(qpdf: qpdf_data, oh: qpdf_oh, value: *mut ::std::os::raw::c_int) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_uint_value(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_ulonglong(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut ::std::os::raw::c_ulonglong,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_uint_value_as_uint(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_uint(qpdf: qpdf_data, oh: qpdf_oh, value: *mut ::std::os::raw::c_uint) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_real_value(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_real(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_number(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_numeric_value(qpdf: qpdf_data, oh: qpdf_oh) -> f64;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_number(qpdf: qpdf_data, oh: qpdf_oh, value: *mut f64) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_name(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_name(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_get_last_string_length(qpdf: qpdf_data) -> usize;
}
extern "C" {
    pub fn qpdf_oh_get_string_value(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_string(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_utf8_value(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_utf8(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_binary_string_value(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_binary_utf8_value(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_array_n_items(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_get_array_item(qpdf: qpdf_data, oh: qpdf_oh, n: ::std::os::raw::c_int) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_begin_dict_key_iter(qpdf: qpdf_data, dict: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_dict_more_keys(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_dict_next_key(qpdf: qpdf_data) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_has_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_key_if_dict(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_is_or_has_name(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_new_uninitialized(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_null(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_bool(qpdf: qpdf_data, value: QPDF_BOOL) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_integer(qpdf: qpdf_data, value: ::std::os::raw::c_longlong) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_real_from_string(qpdf: qpdf_data, value: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_real_from_double(qpdf: qpdf_data, value: f64, decimal_places: ::std::os::raw::c_int) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_name(qpdf: qpdf_data, name: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_string(qpdf: qpdf_data, str_: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_unicode_string(qpdf: qpdf_data, utf8_str: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_binary_string(qpdf: qpdf_data, str_: *const ::std::os::raw::c_char, length: usize) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_binary_unicode_string(
        qpdf: qpdf_data,
        str_: *const ::std::os::raw::c_char,
        length: usize,
    ) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_array(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_dictionary(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_stream(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_make_direct(qpdf: qpdf_data, oh: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_set_array_item(qpdf: qpdf_data, oh: qpdf_oh, at: ::std::os::raw::c_int, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_insert_item(qpdf: qpdf_data, oh: qpdf_oh, at: ::std::os::raw::c_int, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_append_item(qpdf: qpdf_data, oh: qpdf_oh, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_erase_item(qpdf: qpdf_data, oh: qpdf_oh, at: ::std::os::raw::c_int);
}
extern "C" {
    pub fn qpdf_oh_replace_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_remove_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_oh_replace_or_remove_key(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        key: *const ::std::os::raw::c_char,
        item: qpdf_oh,
    );
}
extern "C" {
    pub fn qpdf_oh_get_dict(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_object_id(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_get_generation(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_unparse(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_unparse_resolved(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_unparse_binary(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_copy_foreign_object(qpdf: qpdf_data, other_qpdf: qpdf_data, foreign_oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_stream_data(
        qpdf: qpdf_data,
        stream_oh: qpdf_oh,
        decode_level: qpdf_stream_decode_level_e,
        filtered: *mut QPDF_BOOL,
        bufp: *mut *mut ::std::os::raw::c_uchar,
        len: *mut usize,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_oh_get_page_content_data(
        qpdf: qpdf_data,
        page_oh: qpdf_oh,
        bufp: *mut *mut ::std::os::raw::c_uchar,
        len: *mut usize,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_oh_replace_stream_data(
        qpdf: qpdf_data,
        stream_oh: qpdf_oh,
        buf: *const ::std::os::raw::c_uchar,
        len: usize,
        filter: qpdf_oh,
        decode_parms: qpdf_oh,
    );
}
extern "C" {
    pub fn qpdf_get_num_pages(qpdf: qpdf_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_get_page_n(qpdf: qpdf_data, zero_based_index: usize) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_update_all_pages_cache(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_find_page_by_id(
        qpdf: qpdf_data,
        objid: ::std::os::raw::c_int,
        generation: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_find_page_by_oh(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_push_inherited_attributes_to_page(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_add_page(
        qpdf: qpdf_data,
        newpage_qpdf: qpdf_data,
        newpage: qpdf_oh,
        first: QPDF_BOOL,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_add_page_at(
        qpdf: qpdf_data,
        newpage_qpdf: qpdf_data,
        newpage: qpdf_oh,
        before: QPDF_BOOL,
        refpage: qpdf_oh,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_remove_page(qpdf: qpdf_data, page: qpdf_oh) -> QPDF_ERROR_CODE;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub _address: u8,
}
