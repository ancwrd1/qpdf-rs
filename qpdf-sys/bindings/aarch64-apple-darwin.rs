/* automatically generated by rust-bindgen 0.70.1 */

pub const QPDF_MAJOR_VERSION: u32 = 12;
pub const QPDF_MINOR_VERSION: u32 = 0;
pub const QPDF_PATCH_VERSION: u32 = 0;
pub const QPDF_VERSION: &[u8; 7] = b"12.0.0\0";
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_15_0: u32 = 150000;
pub const __MAC_15_1: u32 = 150100;
pub const __MAC_15_2: u32 = 150200;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_18_0: u32 = 180000;
pub const __IPHONE_18_1: u32 = 180100;
pub const __IPHONE_18_2: u32 = 180200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __WATCHOS_11_1: u32 = 110100;
pub const __WATCHOS_11_2: u32 = 110200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_18_0: u32 = 180000;
pub const __TVOS_18_1: u32 = 180100;
pub const __TVOS_18_2: u32 = 180200;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __BRIDGEOS_9_1: u32 = 90100;
pub const __BRIDGEOS_9_2: u32 = 90200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __DRIVERKIT_24_1: u32 = 240100;
pub const __DRIVERKIT_24_2: u32 = 240200;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_2_0: u32 = 20000;
pub const __VISIONOS_2_1: u32 = 20100;
pub const __VISIONOS_2_2: u32 = 20200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const MAC_OS_VERSION_15_1: u32 = 150100;
pub const MAC_OS_VERSION_15_2: u32 = 150200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150200;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const USE_CLANG_STDDEF: u32 = 0;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const QPDF_SUCCESS: u32 = 0;
pub const QPDF_WARNINGS: u32 = 1;
pub const QPDF_ERRORS: u32 = 2;
pub const QPDF_TRUE: u32 = 1;
pub const QPDF_FALSE: u32 = 0;
pub const qpdf_exit_code_e_qpdf_exit_success: qpdf_exit_code_e = 0;
pub const qpdf_exit_code_e_qpdf_exit_error: qpdf_exit_code_e = 2;
pub const qpdf_exit_code_e_qpdf_exit_warning: qpdf_exit_code_e = 3;
pub const qpdf_exit_code_e_qpdf_exit_is_not_encrypted: qpdf_exit_code_e = 2;
pub const qpdf_exit_code_e_qpdf_exit_correct_password: qpdf_exit_code_e = 3;
pub type qpdf_exit_code_e = ::std::os::raw::c_uint;
pub const qpdf_error_code_e_qpdf_e_success: qpdf_error_code_e = 0;
pub const qpdf_error_code_e_qpdf_e_internal: qpdf_error_code_e = 1;
pub const qpdf_error_code_e_qpdf_e_system: qpdf_error_code_e = 2;
pub const qpdf_error_code_e_qpdf_e_unsupported: qpdf_error_code_e = 3;
pub const qpdf_error_code_e_qpdf_e_password: qpdf_error_code_e = 4;
pub const qpdf_error_code_e_qpdf_e_damaged_pdf: qpdf_error_code_e = 5;
pub const qpdf_error_code_e_qpdf_e_pages: qpdf_error_code_e = 6;
pub const qpdf_error_code_e_qpdf_e_object: qpdf_error_code_e = 7;
pub const qpdf_error_code_e_qpdf_e_json: qpdf_error_code_e = 8;
pub const qpdf_error_code_e_qpdf_e_linearization: qpdf_error_code_e = 9;
pub type qpdf_error_code_e = ::std::os::raw::c_uint;
pub const qpdf_object_type_e_ot_uninitialized: qpdf_object_type_e = 0;
pub const qpdf_object_type_e_ot_reserved: qpdf_object_type_e = 1;
pub const qpdf_object_type_e_ot_null: qpdf_object_type_e = 2;
pub const qpdf_object_type_e_ot_boolean: qpdf_object_type_e = 3;
pub const qpdf_object_type_e_ot_integer: qpdf_object_type_e = 4;
pub const qpdf_object_type_e_ot_real: qpdf_object_type_e = 5;
pub const qpdf_object_type_e_ot_string: qpdf_object_type_e = 6;
pub const qpdf_object_type_e_ot_name: qpdf_object_type_e = 7;
pub const qpdf_object_type_e_ot_array: qpdf_object_type_e = 8;
pub const qpdf_object_type_e_ot_dictionary: qpdf_object_type_e = 9;
pub const qpdf_object_type_e_ot_stream: qpdf_object_type_e = 10;
pub const qpdf_object_type_e_ot_operator: qpdf_object_type_e = 11;
pub const qpdf_object_type_e_ot_inlineimage: qpdf_object_type_e = 12;
pub const qpdf_object_type_e_ot_unresolved: qpdf_object_type_e = 13;
pub const qpdf_object_type_e_ot_destroyed: qpdf_object_type_e = 14;
pub const qpdf_object_type_e_ot_reference: qpdf_object_type_e = 15;
pub type qpdf_object_type_e = ::std::os::raw::c_uint;
pub const qpdf_object_stream_e_qpdf_o_disable: qpdf_object_stream_e = 0;
pub const qpdf_object_stream_e_qpdf_o_preserve: qpdf_object_stream_e = 1;
pub const qpdf_object_stream_e_qpdf_o_generate: qpdf_object_stream_e = 2;
pub type qpdf_object_stream_e = ::std::os::raw::c_uint;
pub const qpdf_stream_data_e_qpdf_s_uncompress: qpdf_stream_data_e = 0;
pub const qpdf_stream_data_e_qpdf_s_preserve: qpdf_stream_data_e = 1;
pub const qpdf_stream_data_e_qpdf_s_compress: qpdf_stream_data_e = 2;
pub type qpdf_stream_data_e = ::std::os::raw::c_uint;
pub const qpdf_stream_encode_flags_e_qpdf_ef_compress: qpdf_stream_encode_flags_e = 1;
pub const qpdf_stream_encode_flags_e_qpdf_ef_normalize: qpdf_stream_encode_flags_e = 2;
pub type qpdf_stream_encode_flags_e = ::std::os::raw::c_uint;
pub const qpdf_stream_decode_level_e_qpdf_dl_none: qpdf_stream_decode_level_e = 0;
pub const qpdf_stream_decode_level_e_qpdf_dl_generalized: qpdf_stream_decode_level_e = 1;
pub const qpdf_stream_decode_level_e_qpdf_dl_specialized: qpdf_stream_decode_level_e = 2;
pub const qpdf_stream_decode_level_e_qpdf_dl_all: qpdf_stream_decode_level_e = 3;
pub type qpdf_stream_decode_level_e = ::std::os::raw::c_uint;
pub const qpdf_json_stream_data_e_qpdf_sj_none: qpdf_json_stream_data_e = 0;
pub const qpdf_json_stream_data_e_qpdf_sj_inline: qpdf_json_stream_data_e = 1;
pub const qpdf_json_stream_data_e_qpdf_sj_file: qpdf_json_stream_data_e = 2;
pub type qpdf_json_stream_data_e = ::std::os::raw::c_uint;
pub const qpdf_r3_print_e_qpdf_r3p_full: qpdf_r3_print_e = 0;
pub const qpdf_r3_print_e_qpdf_r3p_low: qpdf_r3_print_e = 1;
pub const qpdf_r3_print_e_qpdf_r3p_none: qpdf_r3_print_e = 2;
pub type qpdf_r3_print_e = ::std::os::raw::c_uint;
pub const qpdf_r3_modify_e_qpdf_r3m_all: qpdf_r3_modify_e = 0;
pub const qpdf_r3_modify_e_qpdf_r3m_annotate: qpdf_r3_modify_e = 1;
pub const qpdf_r3_modify_e_qpdf_r3m_form: qpdf_r3_modify_e = 2;
pub const qpdf_r3_modify_e_qpdf_r3m_assembly: qpdf_r3_modify_e = 3;
pub const qpdf_r3_modify_e_qpdf_r3m_none: qpdf_r3_modify_e = 4;
pub type qpdf_r3_modify_e = ::std::os::raw::c_uint;
pub const pdf_form_field_flag_e_ff_all_read_only: pdf_form_field_flag_e = 1;
pub const pdf_form_field_flag_e_ff_all_required: pdf_form_field_flag_e = 2;
pub const pdf_form_field_flag_e_ff_all_no_export: pdf_form_field_flag_e = 4;
pub const pdf_form_field_flag_e_ff_btn_no_toggle_off: pdf_form_field_flag_e = 16384;
pub const pdf_form_field_flag_e_ff_btn_radio: pdf_form_field_flag_e = 32768;
pub const pdf_form_field_flag_e_ff_btn_pushbutton: pdf_form_field_flag_e = 65536;
pub const pdf_form_field_flag_e_ff_btn_radios_in_unison: pdf_form_field_flag_e = 131072;
pub const pdf_form_field_flag_e_ff_tx_multiline: pdf_form_field_flag_e = 4096;
pub const pdf_form_field_flag_e_ff_tx_password: pdf_form_field_flag_e = 8192;
pub const pdf_form_field_flag_e_ff_tx_file_select: pdf_form_field_flag_e = 1048576;
pub const pdf_form_field_flag_e_ff_tx_do_not_spell_check: pdf_form_field_flag_e = 4194304;
pub const pdf_form_field_flag_e_ff_tx_do_not_scroll: pdf_form_field_flag_e = 8388608;
pub const pdf_form_field_flag_e_ff_tx_comb: pdf_form_field_flag_e = 16777216;
pub const pdf_form_field_flag_e_ff_tx_rich_text: pdf_form_field_flag_e = 33554432;
pub const pdf_form_field_flag_e_ff_ch_combo: pdf_form_field_flag_e = 131072;
pub const pdf_form_field_flag_e_ff_ch_edit: pdf_form_field_flag_e = 262144;
pub const pdf_form_field_flag_e_ff_ch_sort: pdf_form_field_flag_e = 524288;
pub const pdf_form_field_flag_e_ff_ch_multi_select: pdf_form_field_flag_e = 2097152;
pub const pdf_form_field_flag_e_ff_ch_do_not_spell_check: pdf_form_field_flag_e = 4194304;
pub const pdf_form_field_flag_e_ff_ch_commit_on_sel_change: pdf_form_field_flag_e = 67108864;
pub type pdf_form_field_flag_e = ::std::os::raw::c_uint;
pub const pdf_annotation_flag_e_an_invisible: pdf_annotation_flag_e = 1;
pub const pdf_annotation_flag_e_an_hidden: pdf_annotation_flag_e = 2;
pub const pdf_annotation_flag_e_an_print: pdf_annotation_flag_e = 4;
pub const pdf_annotation_flag_e_an_no_zoom: pdf_annotation_flag_e = 8;
pub const pdf_annotation_flag_e_an_no_rotate: pdf_annotation_flag_e = 16;
pub const pdf_annotation_flag_e_an_no_view: pdf_annotation_flag_e = 32;
pub const pdf_annotation_flag_e_an_read_only: pdf_annotation_flag_e = 64;
pub const pdf_annotation_flag_e_an_locked: pdf_annotation_flag_e = 128;
pub const pdf_annotation_flag_e_an_toggle_no_view: pdf_annotation_flag_e = 256;
pub const pdf_annotation_flag_e_an_locked_contents: pdf_annotation_flag_e = 512;
pub type pdf_annotation_flag_e = ::std::os::raw::c_uint;
pub const qpdf_encryption_status_e_qpdf_es_encrypted: qpdf_encryption_status_e = 1;
pub const qpdf_encryption_status_e_qpdf_es_password_incorrect: qpdf_encryption_status_e = 2;
pub type qpdf_encryption_status_e = ::std::os::raw::c_uint;
pub const qpdf_page_label_e_pl_none: qpdf_page_label_e = 0;
pub const qpdf_page_label_e_pl_digits: qpdf_page_label_e = 1;
pub const qpdf_page_label_e_pl_alpha_lower: qpdf_page_label_e = 2;
pub const qpdf_page_label_e_pl_alpha_upper: qpdf_page_label_e = 3;
pub const qpdf_page_label_e_pl_roman_lower: qpdf_page_label_e = 4;
pub const qpdf_page_label_e_pl_roman_upper: qpdf_page_label_e = 5;
pub type qpdf_page_label_e = ::std::os::raw::c_uint;
pub type qpdf_offset_t = ::std::os::raw::c_longlong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _qpdflogger_handle {
    _unused: [u8; 0],
}
pub type qpdflogger_handle = *mut _qpdflogger_handle;
extern "C" {
    pub fn qpdflogger_default_logger() -> qpdflogger_handle;
}
extern "C" {
    pub fn qpdflogger_create() -> qpdflogger_handle;
}
extern "C" {
    pub fn qpdflogger_cleanup(l: *mut qpdflogger_handle);
}
pub const qpdf_log_dest_e_qpdf_log_dest_default: qpdf_log_dest_e = 0;
pub const qpdf_log_dest_e_qpdf_log_dest_stdout: qpdf_log_dest_e = 1;
pub const qpdf_log_dest_e_qpdf_log_dest_stderr: qpdf_log_dest_e = 2;
pub const qpdf_log_dest_e_qpdf_log_dest_discard: qpdf_log_dest_e = 3;
pub const qpdf_log_dest_e_qpdf_log_dest_custom: qpdf_log_dest_e = 4;
pub type qpdf_log_dest_e = ::std::os::raw::c_uint;
pub type qpdf_log_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_char,
        len: usize,
        udata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn qpdflogger_set_info(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdflogger_set_warn(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdflogger_set_error(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdflogger_set_save(
        l: qpdflogger_handle,
        dest: qpdf_log_dest_e,
        fn_: qpdf_log_fn_t,
        udata: *mut ::std::os::raw::c_void,
        only_if_not_set: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qpdflogger_save_to_standard_output(l: qpdflogger_handle, only_if_not_set: ::std::os::raw::c_int);
}
extern "C" {
    pub fn qpdflogger_equal(l1: qpdflogger_handle, l2: qpdflogger_handle) -> ::std::os::raw::c_int;
}
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"][::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"][::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"][::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"][::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"][::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"][::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"][::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"][::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"][::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"][::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"][::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"][::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"][::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"][::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"][::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"][::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"][::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"][::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"][::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"][::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"][::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(__s1: *const ::std::os::raw::c_char, __n: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(__b: *mut ::std::os::raw::c_void, __pattern4: *const ::std::os::raw::c_void, __len: usize);
}
extern "C" {
    pub fn memset_pattern8(__b: *mut ::std::os::raw::c_void, __pattern8: *const ::std::os::raw::c_void, __len: usize);
}
extern "C" {
    pub fn memset_pattern16(__b: *mut ::std::os::raw::c_void, __pattern16: *const ::std::os::raw::c_void, __len: usize);
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(arg1: *const ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void, arg3: isize);
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _qpdf_data {
    _unused: [u8; 0],
}
pub type qpdf_data = *mut _qpdf_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _qpdf_error {
    _unused: [u8; 0],
}
pub type qpdf_error = *mut _qpdf_error;
pub type QPDF_ERROR_CODE = ::std::os::raw::c_int;
pub type QPDF_BOOL = ::std::os::raw::c_int;
extern "C" {
    pub fn qpdf_silence_errors(qpdf: qpdf_data);
}
extern "C" {
    pub fn qpdf_get_qpdf_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_init() -> qpdf_data;
}
extern "C" {
    pub fn qpdf_cleanup(qpdf: *mut qpdf_data);
}
extern "C" {
    pub fn qpdf_has_error(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_get_error(qpdf: qpdf_data) -> qpdf_error;
}
extern "C" {
    pub fn qpdf_more_warnings(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_next_warning(qpdf: qpdf_data) -> qpdf_error;
}
extern "C" {
    pub fn qpdf_get_error_full_text(q: qpdf_data, e: qpdf_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_error_code(q: qpdf_data, e: qpdf_error) -> qpdf_error_code_e;
}
extern "C" {
    pub fn qpdf_get_error_filename(q: qpdf_data, e: qpdf_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_error_file_position(q: qpdf_data, e: qpdf_error) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn qpdf_get_error_message_detail(q: qpdf_data, e: qpdf_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_set_suppress_warnings(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_logger(qpdf: qpdf_data, logger: qpdflogger_handle);
}
extern "C" {
    pub fn qpdf_get_logger(qpdf: qpdf_data) -> qpdflogger_handle;
}
extern "C" {
    pub fn qpdf_check_pdf(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_set_ignore_xref_streams(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_attempt_recovery(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_read(
        qpdf: qpdf_data,
        filename: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_read_memory(
        qpdf: qpdf_data,
        description: *const ::std::os::raw::c_char,
        buffer: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
        password: *const ::std::os::raw::c_char,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_empty_pdf(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_create_from_json_file(qpdf: qpdf_data, filename: *const ::std::os::raw::c_char) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_create_from_json_data(
        qpdf: qpdf_data,
        buffer: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_update_from_json_file(qpdf: qpdf_data, filename: *const ::std::os::raw::c_char) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_update_from_json_data(
        qpdf: qpdf_data,
        buffer: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_get_pdf_version(qpdf: qpdf_data) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_pdf_extension_level(qpdf: qpdf_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_get_user_password(qpdf: qpdf_data) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_get_info_key(qpdf: qpdf_data, key: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_set_info_key(qpdf: qpdf_data, key: *const ::std::os::raw::c_char, value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_is_linearized(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_is_encrypted(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_accessibility(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_extract_all(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_print_low_res(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_print_high_res(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_assembly(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_form(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_annotation(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_other(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_allow_modify_all(qpdf: qpdf_data) -> QPDF_BOOL;
}
pub type qpdf_write_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_char,
        len: usize,
        udata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn qpdf_write_json(
        qpdf: qpdf_data,
        version: ::std::os::raw::c_int,
        fn_: qpdf_write_fn_t,
        udata: *mut ::std::os::raw::c_void,
        decode_level: qpdf_stream_decode_level_e,
        json_stream_data: qpdf_json_stream_data_e,
        file_prefix: *const ::std::os::raw::c_char,
        wanted_objects: *const *const ::std::os::raw::c_char,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_init_write(qpdf: qpdf_data, filename: *const ::std::os::raw::c_char) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_init_write_memory(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_get_buffer_length(qpdf: qpdf_data) -> usize;
}
extern "C" {
    pub fn qpdf_get_buffer(qpdf: qpdf_data) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn qpdf_set_object_stream_mode(qpdf: qpdf_data, mode: qpdf_object_stream_e);
}
extern "C" {
    pub fn qpdf_set_stream_data_mode(qpdf: qpdf_data, mode: qpdf_stream_data_e);
}
extern "C" {
    pub fn qpdf_set_compress_streams(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_decode_level(qpdf: qpdf_data, level: qpdf_stream_decode_level_e);
}
extern "C" {
    pub fn qpdf_set_preserve_unreferenced_objects(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_newline_before_endstream(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_content_normalization(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_qdf_mode(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_deterministic_ID(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_static_ID(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_static_aes_IV(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_suppress_original_object_IDs(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_preserve_encryption(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_r2_encryption_parameters_insecure(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_print: QPDF_BOOL,
        allow_modify: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_annotate: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_r3_encryption_parameters_insecure(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
    );
}
extern "C" {
    pub fn qpdf_set_r4_encryption_parameters_insecure(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
        encrypt_metadata: QPDF_BOOL,
        use_aes: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_r5_encryption_parameters2(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
        encrypt_metadata: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_r6_encryption_parameters2(
        qpdf: qpdf_data,
        user_password: *const ::std::os::raw::c_char,
        owner_password: *const ::std::os::raw::c_char,
        allow_accessibility: QPDF_BOOL,
        allow_extract: QPDF_BOOL,
        allow_assemble: QPDF_BOOL,
        allow_annotate_and_form: QPDF_BOOL,
        allow_form_filling: QPDF_BOOL,
        allow_modify_other: QPDF_BOOL,
        print: qpdf_r3_print_e,
        encrypt_metadata: QPDF_BOOL,
    );
}
extern "C" {
    pub fn qpdf_set_linearization(qpdf: qpdf_data, value: QPDF_BOOL);
}
extern "C" {
    pub fn qpdf_set_minimum_pdf_version(qpdf: qpdf_data, version: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_set_minimum_pdf_version_and_extension(
        qpdf: qpdf_data,
        version: *const ::std::os::raw::c_char,
        extension_level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qpdf_force_pdf_version(qpdf: qpdf_data, version: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_force_pdf_version_and_extension(
        qpdf: qpdf_data,
        version: *const ::std::os::raw::c_char,
        extension_level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qpdf_register_progress_reporter(
        qpdf: qpdf_data,
        report_progress: ::std::option::Option<
            unsafe extern "C" fn(percent: ::std::os::raw::c_int, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qpdf_write(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
pub type qpdf_oh = ::std::os::raw::c_uint;
extern "C" {
    pub fn qpdf_oh_release(qpdf: qpdf_data, oh: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_release_all(qpdf: qpdf_data);
}
extern "C" {
    pub fn qpdf_oh_new_object(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_get_trailer(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_get_root(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_get_object_by_id(
        qpdf: qpdf_data,
        objid: ::std::os::raw::c_int,
        generation: ::std::os::raw::c_int,
    ) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_make_indirect_object(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_replace_object(
        qpdf: qpdf_data,
        objid: ::std::os::raw::c_int,
        generation: ::std::os::raw::c_int,
        oh: qpdf_oh,
    );
}
extern "C" {
    pub fn qpdf_oh_is_initialized(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_bool(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_null(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_integer(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_real(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_name(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_string(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_operator(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_inline_image(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_array(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_dictionary(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_stream(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_indirect(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_scalar(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_name_and_equals(qpdf: qpdf_data, oh: qpdf_oh, name: *const ::std::os::raw::c_char) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_dictionary_of_type(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        type_: *const ::std::os::raw::c_char,
        subtype: *const ::std::os::raw::c_char,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_type_code(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_object_type_e;
}
extern "C" {
    pub fn qpdf_oh_get_type_name(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_wrap_in_array(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_parse(qpdf: qpdf_data, object_str: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_bool_value(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_bool(qpdf: qpdf_data, oh: qpdf_oh, value: *mut QPDF_BOOL) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_int_value(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_longlong(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut ::std::os::raw::c_longlong,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_int_value_as_int(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_int(qpdf: qpdf_data, oh: qpdf_oh, value: *mut ::std::os::raw::c_int) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_uint_value(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_ulonglong(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut ::std::os::raw::c_ulonglong,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_uint_value_as_uint(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_uint(qpdf: qpdf_data, oh: qpdf_oh, value: *mut ::std::os::raw::c_uint) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_real_value(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_real(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_is_number(qpdf: qpdf_data, oh: qpdf_oh) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_numeric_value(qpdf: qpdf_data, oh: qpdf_oh) -> f64;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_number(qpdf: qpdf_data, oh: qpdf_oh, value: *mut f64) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_name(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_name(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_get_last_string_length(qpdf: qpdf_data) -> usize;
}
extern "C" {
    pub fn qpdf_oh_get_string_value(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_string(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_utf8_value(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_value_as_utf8(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_binary_string_value(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_binary_utf8_value(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_get_array_n_items(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_get_array_item(qpdf: qpdf_data, oh: qpdf_oh, n: ::std::os::raw::c_int) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_begin_dict_key_iter(qpdf: qpdf_data, dict: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_dict_more_keys(qpdf: qpdf_data) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_dict_next_key(qpdf: qpdf_data) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_has_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_get_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_key_if_dict(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_is_or_has_name(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char) -> QPDF_BOOL;
}
extern "C" {
    pub fn qpdf_oh_new_uninitialized(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_null(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_bool(qpdf: qpdf_data, value: QPDF_BOOL) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_integer(qpdf: qpdf_data, value: ::std::os::raw::c_longlong) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_real_from_string(qpdf: qpdf_data, value: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_real_from_double(qpdf: qpdf_data, value: f64, decimal_places: ::std::os::raw::c_int) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_name(qpdf: qpdf_data, name: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_string(qpdf: qpdf_data, str_: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_unicode_string(qpdf: qpdf_data, utf8_str: *const ::std::os::raw::c_char) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_binary_string(qpdf: qpdf_data, str_: *const ::std::os::raw::c_char, length: usize) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_binary_unicode_string(
        qpdf: qpdf_data,
        str_: *const ::std::os::raw::c_char,
        length: usize,
    ) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_array(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_dictionary(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_new_stream(qpdf: qpdf_data) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_make_direct(qpdf: qpdf_data, oh: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_set_array_item(qpdf: qpdf_data, oh: qpdf_oh, at: ::std::os::raw::c_int, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_insert_item(qpdf: qpdf_data, oh: qpdf_oh, at: ::std::os::raw::c_int, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_append_item(qpdf: qpdf_data, oh: qpdf_oh, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_erase_item(qpdf: qpdf_data, oh: qpdf_oh, at: ::std::os::raw::c_int);
}
extern "C" {
    pub fn qpdf_oh_replace_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char, item: qpdf_oh);
}
extern "C" {
    pub fn qpdf_oh_remove_key(qpdf: qpdf_data, oh: qpdf_oh, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qpdf_oh_replace_or_remove_key(
        qpdf: qpdf_data,
        oh: qpdf_oh,
        key: *const ::std::os::raw::c_char,
        item: qpdf_oh,
    );
}
extern "C" {
    pub fn qpdf_oh_get_dict(qpdf: qpdf_data, oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_object_id(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_get_generation(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_oh_unparse(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_unparse_resolved(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_unparse_binary(qpdf: qpdf_data, oh: qpdf_oh) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qpdf_oh_copy_foreign_object(qpdf: qpdf_data, other_qpdf: qpdf_data, foreign_oh: qpdf_oh) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_oh_get_stream_data(
        qpdf: qpdf_data,
        stream_oh: qpdf_oh,
        decode_level: qpdf_stream_decode_level_e,
        filtered: *mut QPDF_BOOL,
        bufp: *mut *mut ::std::os::raw::c_uchar,
        len: *mut usize,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_oh_get_page_content_data(
        qpdf: qpdf_data,
        page_oh: qpdf_oh,
        bufp: *mut *mut ::std::os::raw::c_uchar,
        len: *mut usize,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_oh_free_buffer(bufp: *mut *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn qpdf_oh_replace_stream_data(
        qpdf: qpdf_data,
        stream_oh: qpdf_oh,
        buf: *const ::std::os::raw::c_uchar,
        len: usize,
        filter: qpdf_oh,
        decode_parms: qpdf_oh,
    );
}
extern "C" {
    pub fn qpdf_get_num_pages(qpdf: qpdf_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_get_page_n(qpdf: qpdf_data, zero_based_index: usize) -> qpdf_oh;
}
extern "C" {
    pub fn qpdf_update_all_pages_cache(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_find_page_by_id(
        qpdf: qpdf_data,
        objid: ::std::os::raw::c_int,
        generation: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_find_page_by_oh(qpdf: qpdf_data, oh: qpdf_oh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qpdf_push_inherited_attributes_to_page(qpdf: qpdf_data) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_add_page(
        qpdf: qpdf_data,
        newpage_qpdf: qpdf_data,
        newpage: qpdf_oh,
        first: QPDF_BOOL,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_add_page_at(
        qpdf: qpdf_data,
        newpage_qpdf: qpdf_data,
        newpage: qpdf_oh,
        before: QPDF_BOOL,
        refpage: qpdf_oh,
    ) -> QPDF_ERROR_CODE;
}
extern "C" {
    pub fn qpdf_remove_page(qpdf: qpdf_data, page: qpdf_oh) -> QPDF_ERROR_CODE;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
